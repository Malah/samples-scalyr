{
  name: "Kubernetes Explorer",
  urlTemplate: null,
  configType: "TABBED",
  duration: "4 hours",
  description:"test",
  tabs: [{
      tabName: "OVERVIEW",
      graphs: [
        {
          graphStyle: "number",
          query: "monitor ='openmetrics_monitor' k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') namespace =#namespace# serverHost = * k8s-node = * \n| group count=estimate_distinct(k8s-node)",
          title: "Nodes",
          layout: {
  h: 5,
  w: 13,
  x: 13,
  y: 0
},
        }, {
          graphStyle: "number",
          query: "logfile contains 'kubernetes-api-metrics.log' k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') serverHost = * k8s-node = *\n| group count=estimate_distinct(k8s-cluster)",
          title: "Clusters",
          layout: {
  h: 5,
  w: 13,
  x: 0,
  y: 0
}
        }, {
          graphStyle: "number",
          query: "monitor='openmetrics_monitor' k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo')   serverHost = * k8s-node = * message contains 'owner_kind=\"Deployment\"' namespace=#namespace#\n| parse 'owner_name=\"$owner_name$\" ' from message\n| group count=estimate_distinct(owner_name) by owner_name, k8s-cluster \n| group '# Deployments'=sum(count) ",
          title: "Deployments",
          layout: {
  h: 5,
  w: 12,
  x: 26,
  y: 0
}
        }, {
          graphStyle: "number",
          query: "logfile contains 'kubernetes-api-metrics.log' k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') serverHost = * k8s-node = * namespace=#namespace#\n| group count=estimate_distinct(namespace)",
          title: "Namespaces",
          layout: {
  h: 5,
  w: 11,
  x: 38,
  y: 0
}
        }, {
          graphStyle: "number",
          query: "logfile contains 'kubernetes-api-cadvisor-metrics.log' k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') serverHost = * k8s-node = * namespace = #namespace# \n| group count=estimate_distinct(pod)",
          title: "Pods",
          layout: {
  h: 5,
  w: 10,
  x: 49,
  y: 0
}
        }, {
          graphStyle: "",
          query: "logfile contains 'kubernetes-api-metrics.log' k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') serverHost = * k8s-node = * namespace=#namespace#\n| group '# Nodes'=estimate_distinct(k8s-node)  by k8s-cluster",
          showBarsColumn: "true",
          title: "Nodes per Cluster",
          layout: {
  h: 13,
  w: 30,
  x: 0,
  y: 31
}
        }, {
          graphStyle: "",
          query: "monitor='openmetrics_monitor'  k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') namespace=#namespace#\n|  group  '# Containers' =estimate_distinct(container) by Cluster=k8s-cluster",
          title: "Containers per Cluster",
          showBarsColumn: "true",
          layout: {
  h: 14,
  w: 30,
  x: 0,
  y: 17
}
        }, {
          graphStyle: "stacked",
          lineSmoothing: "straightLines",
          title: "Nodes per Cluster Over Time",
          layout: {
  h: 13,
  w: 30,
  x: 30,
  y: 31
},
          query: "logfile contains 'kubernetes-api-metrics.log' k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') serverHost = * k8s-node = * namespace=#namespace# | group count=estimate_distinct(k8s-node) by Cluster=k8s-cluster, timestamp=timebucket('10 min') | transpose Cluster",
          yScale: "linear"
        }, {
          graphStyle: "",
          query: "logfile contains 'kubernetes-api-cadvisor-metrics.log' k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') namespace =#namespace# serverHost = * k8s-node = * \n| group '# Pods' =estimate_distinct(pod) by Cluster=k8s-cluster",
          title: "Pods per Cluster",
          showBarsColumn: "true",
          layout: {
  h: 14,
  w: 30,
  x: 0,
  y: 44
}
        }, {
          graphStyle: "",
          query: "logfile contains ('openmetrics', 'kube-state-metrics') k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') namespace =#namespace# serverHost = * k8s-node = * message contains 'owner_kind=\"Deployment\"' \n| parse 'owner_name=\"$owner_name$\" ' from message\n| group count=estimate_distinct(owner_name) by owner_name, k8s-cluster \n| group '# Deployments'=sum(count) by k8s-cluster",
          title: "Deployments per Cluster",
          showBarsColumn: "true",
          layout: {
  h: 14,
  w: 30,
  x: 30,
  y: 44
}
        }, {
          graphStyle: "stacked",
          lineSmoothing: "straightLines",
          title: "Containers per Cluster Over Time",
          layout: {
  h: 14,
  w: 30,
  x: 30,
  y: 17
},
          query: "monitor='openmetrics_monitor' k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') namespace =#namespace# \n| group Containers=estimate_distinct(container) by Cluster=k8s-cluster, time=timebucket(\"5 minute\") | columns time, Cluster, Containers| transpose Cluster",
          yScale: "linear"
        }, {
          graphStyle: "honeycomb",
          query: "monitor ='openmetrics_monitor' and metric contains ('node_memory_memtotal_bytes', 'node_memory_memfree_bytes' , 'node_memory_cached_bytes', 'node_memory_sreclaimable_bytes', 'node_memory_buffers_bytes' ) and k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') and k8s-node=*\n| group total = newest(metric == 'node_memory_memtotal_bytes' ? value : null),\n        free = newest(metric == 'node_memory_memfree_bytes' ? value : null),\n        cached = newest(metric == 'node_memory_cached_bytes' ? value : null),\n        reclaimable = newest(metric == 'node_memory_sreclaimable_bytes' ? value : null),\n        buffers = newest(metric == 'node_memory_buffers_bytes' ? value : null)\nby k8s-node, k8s-cluster\n| let usedMemory = total - free - buffers - cached - reclaimable, usedInPercents= (usedMemory/total)*100\n| columns Cluster=k8s-cluster, Node=k8s-node, 'Memory Capacity Usage'=usedInPercents",
          title: "Memory Utilization by Cluster & Host",
          layout: {
  h: 12,
  w: 30,
  x: 30,
  y: 5
},
          honeyCombColor: {
            hover: "#D3C4FF",
            label: "Purple",
            value: "#9978FF"
          },
          honeyCombGroupBy: "Cluster",
          honeyCombThresholds: [
            "0",
            "15",
            "60",
            "85"
          ],
          honeyCombLinkTo: ""
        }, {
          graphStyle: "honeycomb",
          query: "monitor ='openmetrics_monitor' k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo')  metric ='node_cpu_seconds_total'\n|group idleNewest=newest(mode == 'idle' ? value : null), idleOldest=oldest(mode == 'idle' ? value : null),\niowaitNewest=newest(mode == 'iowait' ? value : null), iowaitOldest=oldest(mode == 'iowait' ? value : null),\nirqNewest=newest(mode == 'irq' ? value : null),  irqOldest=oldest(mode == 'irq' ? value : null),  \nniceNewest=newest(mode == 'nice' ? value : null), niceOldest=oldest(mode == 'nice' ? value : null),\nstealNewest=newest(mode == 'steal' ? value : null), stealOldest=oldest(mode == 'steal' ? value : null),\nsoftIrqNewest=newest(mode == 'softirq' ? value : null), softIrqOldest=oldest(mode == 'softirq' ? value : null),\nsystemNewest=newest(mode == 'system' ? value : null), systemOldest=oldest(mode == 'system' ? value : null),\nuseNewest =newest(mode == 'user' ? value : null), useOldest=oldest(mode == 'user' ? value : null), \nmaxTime=newest(timestamp), minTime=oldest(timestamp)\nby k8s-node, cpu, k8s-cluster\n| let \nidleDelta = idleNewest - idleOldest,  \niowaitDelta = iowaitNewest - iowaitOldest,  \nirqDelta = irqNewest - irqOldest,  \nniceDelta = niceNewest - niceOldest,\nstealDelta = stealNewest - stealOldest,\nsoftIrqDelta = softIrqNewest - softIrqOldest,\nsystemDelta = systemNewest - systemOldest,\nuseDelta = useNewest - useOldest,\ntimeDelta = (maxTime - minTime)/1000000000,\nusageCpuDelta = iowaitDelta + irqDelta + niceDelta + stealDelta + systemDelta + useDelta +softIrqDelta,\nusageTotalPossibleByDeltas = usageCpuDelta + idleDelta,\nusedCpuPercent = (usageCpuDelta / timeDelta) * 100,\nusedCalculatedByTotalSubstractIdlePercent= ((timeDelta - idleDelta)/timeDelta)*100,\nusageByTotalDeltas= (usageCpuDelta/usageTotalPossibleByDeltas)*100 \n| sort k8s-node, cpu\n| group CpuUsageByTotalDeltas=avg(usageByTotalDeltas) by k8s-node, k8s-cluster\n| columns Cluster=k8s-cluster, Node=k8s-node, 'CPU Capacity Used'=CpuUsageByTotalDeltas",
          title: "CPU Utilization by Cluster & Host",
          layout: {
  h: 12,
  w: 30,
  x: 0,
  y: 5
},
          honeyCombColor: {
            hover: "#8ED4FB",
            label: "Blue",
            value: "#0998E7"
          },
          honeyCombGroupBy: "Cluster",
          honeyCombThresholds: [
            "0",
            "15",
            "60",
            "85"
          ],
          honeyCombLinkTo: ""
        }
      ],
      options: {
        layout: {
          columns: 3
        }
      },
      parameters: [
        {
          "name": "cluster",
          label: "cluster",
          facet: "k8s-cluster",
          defaultValue: "*"
        }, {
          "name": "namespace",
          label: "Namespace",
          facet: "namespace",
          defaultValue: "*"
        },
      ],
    },
{
      tabName: "WORKLOADS",
      parameters: [               
        {
      "name": "ClusterWorkloads",
      label: "clusterWorkloads",
      "values": [
        {
          "label": "Aggregate (all clusters)",
          "value": "*"
        },
        "__k8sClustersQ",
        {
          "label": "rpi-k3s-cluster",
          "value": "'rpi-k3s-cluster'"
        },
        {
          "label": "sy-stage-stagingeu-eks",
          "value": "'sy-stage-stagingeu-eks'"
        },                   
      ]
    },
        {
      "name": "WorkloadStatusCategory",
      label: "Workload status category",
      "values": [
        {
          "label": "All statuses",
          "value": "reason=*"
        },
        {
          "label": "Bad statuses",
          "value": "reason in ('Unhealthy', 'BackOff')"
        },        
      ]
    },    
      ],
      graphs: [
        {
          title: "Events By Workloads",
          keys: [
            {
              attribute: "k8s-controller",
              label: "Workloads"
            }
          ],
          columns: [
            {
              attribute: "reason",
              filter: "$k8s-cluster = #ClusterWorkloads# $k8s-controller=* #WorkloadStatusCategory# $logfile contains \"kubernetes_events.log\"  ",
              function: "breakdown",
              includeTotal: true
            }
          ],
          layout: {
            h: 21,
            w: 60,
            x: 0,
            y: 0
          }
        },
      ],
    },
{
      tabName: "NODES",
      graphs: [
        {
          graphStyle: "number",          		
          query: "logfile contains 'kubernetes-api-metrics.log' k8s-cluster= #cluster# serverHost = * k8s-node = #nodename# \n| group count=estimate_distinct(k8s-node)",
          title: "Nodes",
          layout: {
  h: 5,
  w: 20,
  x: 0,
  y: 1
}
        }, {
          graphStyle: "number",
          query: "monitor ='openmetrics_monitor' k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') k8s-node=#nodename#  metric=\"machine_cpu_cores\"\n| group totalPerNode=avg(value) by k8s-node\n| group sum (totalPerNode)",
          title: "Total CPU",
          layout: {
  h: 5,
  w: 20,
  x: 38,
  y: 0
}
        }, {
          graphStyle: "number",
          query: "monitor ='openmetrics_monitor'  k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') k8s-node=#nodename# metric=\"machine_memory_bytes\"\n| group totalPerNode=max(value) by k8s-node\n| group sum (totalPerNode)/1000000000",
          title: "Total Memory",
          layout: {
  h: 5,
  w: 18,
  x: 20,
  y: 1
},
          options: {
            precision: "4",
            suffix: " GB"
          }
        }, {
          graphStyle: "honeycomb",
          query: "monitor ='openmetrics_monitor' and metric contains ('node_memory_memtotal_bytes', 'node_memory_memfree_bytes' , 'node_memory_cached_bytes', 'node_memory_sreclaimable_bytes', 'node_memory_buffers_bytes' ) and k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') and k8s-node=#nodename# \n| group total = newest(metric == 'node_memory_memtotal_bytes' ? value : null),\n        free = newest(metric == 'node_memory_memfree_bytes' ? value : null),\n        cached = newest(metric == 'node_memory_cached_bytes' ? value : null),\n        reclaimable = newest(metric == 'node_memory_sreclaimable_bytes' ? value : null),\n        buffers = newest(metric == 'node_memory_buffers_bytes' ? value : null)\nby k8s-node, k8s-cluster\n| let usedMemory = total - free - buffers - cached - reclaimable, usedInPercents= (usedMemory/total)*100\n| columns Cluster=k8s-cluster, Node=k8s-node, 'Memory Capacity Usage'=usedInPercents",
          title: "Memory by Node",
          layout: {
  h: 11,
  i: "3",
  minH: 3,
  minW: 6,
  w: 30,
  x: 30,
  y: 6
},
          honeyCombColor: {
            hover: "#D3C4FF",
            label: "Purple",
            value: "#9978FF"
          },
          honeyCombGroupBy: "",
          honeyCombThresholds: [
            "0",
            "15",
            "60",
            "85"
          ],
          honeyCombLinkTo: ""
        }, {
          graphStyle: "",
          query: "monitor ='openmetrics_monitor'  and  k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') and k8s-node=#nodename#  and metric contains ('node_memory_memtotal_bytes', 'node_memory_memfree_bytes' , 'node_memory_cached_bytes', 'node_memory_sreclaimable_bytes', 'node_memory_buffers_bytes' )\n| group total = newest(metric == 'node_memory_memtotal_bytes' ? value : null),\n        free = newest(metric == 'node_memory_memfree_bytes' ? value : null),\n        cached = newest(metric == 'node_memory_cached_bytes' ? value : null),\n        reclaimable = newest(metric == 'node_memory_sreclaimable_bytes' ? value : null),\n        buffers = newest(metric == 'node_memory_buffers_bytes' ? value : null)\nby k8s-node\n| let usedMemory = total - free - buffers - cached - reclaimable, usedInPercents= (usedMemory/total)*100\n| sort -usedInPercents\n| columns Node=k8s-node, 'Memory Capacity Usage'=usedInPercents\n| limit 10",
          title: "Top 10 Nodes by Memory Capacity Used",
          layout: {
  h: 14,
  w: 30,
  x: 30,
  y: 17
}
        }, {
          graphStyle: "line",
          lineSmoothing: "straightLines",                    
          query: "| join main=(monitor = 'openmetrics_monitor' k8s-cluster=#cluster# k8s-node=#nodename# metric='node_network_transmit_bytes_total' | group network_out_mbs=(max(value)-min(value))/1000000, timeDelta=(max(timestamp)-min(timestamp))/1000000000  by k8s-node, tb=timebucket('6min'), device | filter timeDelta > 0 | let rateByMBs = network_out_mbs/timeDelta, graphTitle= device + \" \" + k8s-node | columns tb, rateByMBs, graphTitle, k8s-node, device), sorting = (monitor = 'openmetrics_monitor' k8s-cluster=#cluster# k8s-node=#nodename# metric='node_network_transmit_bytes_total' | group network_out_mbs=(max(value)-min(value))/1000000 by k8s-node, tb=timebucket('6min'), device | group maximumInBucket=max(network_out_mbs) by k8s-node, device | sort -maximumInBucket | limit 20 ) on k8s-node, device | columns tb, rateByMBs, graphTitle | transpose graphTitle",       
          title: "Network Out per Node (Rate MB/s) top 20",
          yScale: "linear",
          layout: {
  h: 14,
  w: 30,
  x: 0,
  y: 30
}
        }, {
          graphStyle: "line",
          lineSmoothing: "straightLines",
          query: "| join main=(monitor = 'openmetrics_monitor' k8s-cluster=#cluster# k8s-node=#nodename# metric='node_network_receive_bytes_total' | group network_out_mbs=(max(value)-min(value))/1000000, timeDelta=(max(timestamp)-min(timestamp))/1000000000  by k8s-node, tb=timebucket('6min'), device | filter timeDelta > 0 | let rateByMBs = network_out_mbs/timeDelta, graphTitle= device + \" \" + k8s-node | columns tb, rateByMBs, graphTitle, k8s-node, device), sorting = (monitor = 'openmetrics_monitor' k8s-cluster=#cluster# k8s-node=#nodename# metric='node_network_receive_bytes_total' | group network_out_mbs=(max(value)-min(value))/1000000 by k8s-node, tb=timebucket('6min'), device | group maximumInBucket=max(network_out_mbs) by k8s-node, device | sort -maximumInBucket | limit 20 ) on k8s-node, device | columns tb, rateByMBs, graphTitle | transpose graphTitle",                 
          title: "Network In per Node (Rate MB/s) top 20",
          yScale: "linear",
          layout: {
  h: 14,
  w: 30,
  x: 30,
  y: 31
}
        }, {
          query: "monitor ='openmetrics_monitor' k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') k8s-node=#nodename# metric ='node_cpu_seconds_total'\n|group idleNewest=newest(mode == 'idle' ? value : null), idleOldest=oldest(mode == 'idle' ? value : null),\niowaitNewest=newest(mode == 'iowait' ? value : null), iowaitOldest=oldest(mode == 'iowait' ? value : null),\nirqNewest=newest(mode == 'irq' ? value : null),  irqOldest=oldest(mode == 'irq' ? value : null),  \nniceNewest=newest(mode == 'nice' ? value : null), niceOldest=oldest(mode == 'nice' ? value : null),\nstealNewest=newest(mode == 'steal' ? value : null), stealOldest=oldest(mode == 'steal' ? value : null),\nsoftIrqNewest=newest(mode == 'softirq' ? value : null), softIrqOldest=oldest(mode == 'softirq' ? value : null),\nsystemNewest=newest(mode == 'system' ? value : null), systemOldest=oldest(mode == 'system' ? value : null),\nuseNewest =newest(mode == 'user' ? value : null), useOldest=oldest(mode == 'user' ? value : null), \nmaxTime=newest(timestamp), minTime=oldest(timestamp)\nby k8s-node, cpu, k8s-cluster\n| let \nidleDelta = idleNewest - idleOldest,  \niowaitDelta = iowaitNewest - iowaitOldest,  \nirqDelta = irqNewest - irqOldest,  \nniceDelta = niceNewest - niceOldest,\nstealDelta = stealNewest - stealOldest,\nsoftIrqDelta = softIrqNewest - softIrqOldest,\nsystemDelta = systemNewest - systemOldest,\nuseDelta = useNewest - useOldest,\ntimeDelta = (maxTime - minTime)/1000000000,\nusageCpuDelta = iowaitDelta + irqDelta + niceDelta + stealDelta + systemDelta + useDelta +softIrqDelta,\nusageTotalPossibleByDeltas = usageCpuDelta + idleDelta,\nusedCpuPercent = (usageCpuDelta / timeDelta) * 100,\nusedCalculatedByTotalSubstractIdlePercent= ((timeDelta - idleDelta)/timeDelta)*100,\nusageByTotalDeltas= (usageCpuDelta/usageTotalPossibleByDeltas)*100 \n| sort k8s-node, cpu\n| group CpuUsageByTotalDeltas=avg(usageByTotalDeltas) by k8s-node, k8s-cluster\n| columns Cluster=k8s-cluster, Node=k8s-node, 'CPU Capacity Used'=CpuUsageByTotalDeltas\n",
          title: "CPU Utlization by Node",
          graphStyle: "honeycomb",
          layout: {
  h: 11,
  i: "7",
  minH: 3,
  minW: 6,
  w: 30,
  x: 0,
  y: 4
},
          honeyCombColor: {
            hover: "#8ED4FB",
            label: "Blue",
            value: "#0998E7"
          },
          honeyCombGroupBy: "",
          honeyCombThresholds: [
            "0",
            "15",
            "60",
            "85"
          ],
          honeyCombLinkTo: ""
        }, {
          query: "monitor ='openmetrics_monitor' k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') k8s-node=#nodename# metric ='node_cpu_seconds_total'\n|group idleNewest=newest(mode == 'idle' ? value : null), idleOldest=oldest(mode == 'idle' ? value : null),\niowaitNewest=newest(mode == 'iowait' ? value : null), iowaitOldest=oldest(mode == 'iowait' ? value : null),\nirqNewest=newest(mode == 'irq' ? value : null),  irqOldest=oldest(mode == 'irq' ? value : null),  \nniceNewest=newest(mode == 'nice' ? value : null), niceOldest=oldest(mode == 'nice' ? value : null),\nstealNewest=newest(mode == 'steal' ? value : null), stealOldest=oldest(mode == 'steal' ? value : null),\nsoftIrqNewest=newest(mode == 'softirq' ? value : null), softIrqOldest=oldest(mode == 'softirq' ? value : null),\nsystemNewest=newest(mode == 'system' ? value : null), systemOldest=oldest(mode == 'system' ? value : null),\nuseNewest =newest(mode == 'user' ? value : null), useOldest=oldest(mode == 'user' ? value : null), \nmaxTime=newest(timestamp), minTime=oldest(timestamp)\nby k8s-node, cpu\n| let \nidleDelta = idleNewest - idleOldest,  \niowaitDelta = iowaitNewest - iowaitOldest,  \nirqDelta = irqNewest - irqOldest,  \nniceDelta = niceNewest - niceOldest,\nstealDelta = stealNewest - stealOldest,\nsoftIrqDelta = softIrqNewest - softIrqOldest,\nsystemDelta = systemNewest - systemOldest,\nuseDelta = useNewest - useOldest,\ntimeDelta = (maxTime - minTime)/1000000000,\nusageCpuDelta = iowaitDelta + irqDelta + niceDelta + stealDelta + systemDelta + useDelta +softIrqDelta,\nusageTotalPossibleByDeltas = usageCpuDelta + idleDelta,\nusedCpuPercent = (usageCpuDelta / timeDelta) * 100,\nusedCalculatedByTotalSubstractIdlePercent= ((timeDelta - idleDelta)/timeDelta)*100,\nusageByTotalDeltas= (usageCpuDelta/usageTotalPossibleByDeltas)*100 \n\n| sort k8s-node, cpu\n| group CpuUsageByTotalDeltas=avg(usageByTotalDeltas) by k8s-node\n| sort -CpuUsageByTotalDeltas\n| columns Node=k8s-node, 'CPU Capacity Used'=CpuUsageByTotalDeltas\n",
          title: "Top 10 Nodes by CPU Capacity Used",
          layout: {
  h: 14,
  w: 30,
  x: 0,
  y: 16
}
        }, {
          graphStyle: "line",
          lineSmoothing: "straightLines",
          query: "| join source=(monitor = 'openmetrics_monitor' k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') k8s-node=#nodename# metric='node_disk_written_bytes_total' \n  | group disk_in_mbs=(max(value)-min(value))/1000000, timeDelta=(max(timestamp)-min(timestamp))/1000000000 by k8s-node, tb=timebucket('6min'), device \n  | filter timeDelta > 0\n  | let rateByMBs = disk_in_mbs/timeDelta, title = device + \" \" + k8s-node\n  | columns tb, rateByMBs, title, device, k8s-node),\nsorting = (monitor = 'openmetrics_monitor' k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') k8s-node=#nodename# metric='node_disk_written_bytes_total' | group maximumDeltaByPeriod=max(value)-min(value) by k8s-node, device | sort -maximumDeltaByPeriod | limit 20) \non k8s-node, device\n| columns tb, title, rateByMBs\n| transpose title\n",                    
          title: "Disk Writes per Node rate (MB/s) top 20",
          yScale: "linear",
          layout: {
  h: 14,
  w: 30,
  x: 0,
  y: 44
}
        }, {
          graphStyle: "line",
          lineSmoothing: "straightLines",
		  query: "| join source=(monitor = 'openmetrics_monitor' k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') k8s-node=#nodename# metric='node_disk_read_bytes_total' \n  | group disk_in_mbs=(max(value)-min(value))/1000000, timeDelta=(max(timestamp)-min(timestamp))/1000000000 by k8s-node, tb=timebucket('6min'), device \n  | filter timeDelta > 0\n  | let rateByMBs = disk_in_mbs/timeDelta, title = device + \" \" + k8s-node\n  | columns tb, rateByMBs, title, device, k8s-node),\nsorting = (monitor = 'openmetrics_monitor' k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') k8s-node=#nodename# metric='node_disk_read_bytes_total' | group maximumDeltaByPeriod=max(value)-min(value) by k8s-node, device | sort -maximumDeltaByPeriod | limit 20) \non k8s-node, device\n| columns tb, title, rateByMBs\n| transpose title\n",                              
          title: "Disk Reads per Node rate (MB/s) top 20",
          yScale: "linear",
          layout: {
  h: 14,
  w: 30,
  x: 30,
  y: 45
}
        }, {
          graphStyle: "line",
          lineSmoothing: "straightLines",
          query: "monitor ='openmetrics_monitor' k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') k8s-node=#nodename#  metric contains 'kube_node_status_allocatable' resource='memory'\n| group 'Memory GBs'=avg(value)/1000000000 by node, timebucket('6min')\n| transpose node",
          title: "Allocatable Memory per Node",
          yScale: "linear",
          layout: {
  h: 14,
  w: 30,
  x: 0,
  y: 58
}
        }, {
          graphStyle: "line",
          lineSmoothing: "straightLines",
          query: "monitor ='openmetrics_monitor' k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') k8s-node=#nodename#  metric contains 'kube_node_status_allocatable' resource='pods'\n| group avg(value) by node, timebucket('6min')\n| transpose node",
          title: "Allocatable Pods per Node",
          yScale: "linear",
          layout: {
  h: 14,
  w: 30,
  x: 30,
  y: 59
}
        }, {
          graphStyle: "line",
          lineSmoothing: "straightLines",
          query: "monitor ='openmetrics_monitor' k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') k8s-node=#nodename#  metric contains 'kube_node_status_allocatable' resource='cpu'\n| group avg(value) by node, timebucket('6min')\n| transpose node",
          title: "Allocatable CPU Cores per Node",
          yScale: "linear",
          layout: {
  h: 14,
  w: 30,
  x: 0,
  y: 72
}
        }
      ],
      parameters: [
        {
          "name": "cluster",
          label: "cluster",
          facet: "k8s-cluster",
          defaultValue: "*"
        },
        {
          "name": "nodename",
          label: "Node name",
          facet: "k8s-node",
          defaultValue: "*"
        },
      ],
    },
{
      tabName: "PODS",
      graphs: [
        {
          graphStyle: "number",
          query: "logfile contains 'kubernetes-api-cadvisor-metrics.log' k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') namespace = #namespace# serverHost = * k8s-node = *  pod!=''\n| group count=estimate_distinct(pod)",
          title: "Active Pods",
          layout: {
  h: 14,
  w: 16,
  x: 0,
  y: 0
}
        }, {
          graphStyle: "line",
          lineSmoothing: "straightLines",
          query: "logfile contains 'kubernetes-api-cadvisor-metrics.log' k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') serverHost = * k8s-node = * namespace = #namespace# \n| group count=estimate_distinct(pod) by k8s-cluster , timebucket('5 min') | transpose k8s-cluster",
          title: "Active Pods over Time",
          yScale: "linear",
          layout: {
            h: 14,
            w: 44,
            x: 16,
            y: 0
          }
        }, {
          graphStyle: "",
          query: "monitor ='openmetrics_monitor' and container_cpu_usage_seconds_total and name ='' and pod!='' and k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') and namespace=#namespace#\n| group cpuMax=max(value), cpuMin=min(value), maxTime = max(timestamp), minTime = min(timestamp) by pod , name, k8s-cluster, k8s-daemon-set\n| let cpuDelta= cpuMax - cpuMin, timeDelta = (maxTime - minTime)/1000000000 \n| filter timeDelta > 0\n| let usage= (cpuDelta/timeDelta)*100\n| sort -usage\n| columns  'Pod name'=pod, 'CPU usage in %'=usage",
          title: "Most CPU Intensive Pods",
          layout: {
  h: 14,
  w: 16,
  x: 0,
  y: 28
},
        }, {
          graphStyle: "line",
          lineSmoothing: "straightLines",
          query: "| join allPodsUsage = (monitor ='openmetrics_monitor' container_cpu_usage_seconds_total and name ='' and pod!='' k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') namespace = #namespace# | columns pod, k8s-cluster, value, timestamp), topTenPods = (monitor ='openmetrics_monitor' container_cpu_usage_seconds_total and name ='' and pod!='' k8s-cluster=* namespace=* | group cpuMax=max(value), cpuMin=min(value), maxTime = max(timestamp), minTime = min(timestamp) by pod , name, k8s-cluster, k8s-daemon-set | let cpuDelta= cpuMax - cpuMin, timeDelta = (maxTime - minTime)/1000000000 | filter timeDelta > 0 | let usage= (cpuDelta/timeDelta)*100 | sort -usage | limit 10 | columns pod) on pod | group usage= (max(timestamp) - min(timestamp))/1000000000 > 0 ? ( (max(value) - min(value)) / ( (max(timestamp) - min(timestamp))/1000000000))* 100  : 0 by pod ,bucket=timebucket('10min') | sort -usage | columns  bucket, pod, 'CPU usage in %'=usage| transpose pod",
          title: "Top Pods: CPU Usage",
          yScale: "linear",
          layout: {
            h: 14,
            w: 44,
            x: 16,
            y: 28
          }
        }, {
          query: "monitor = 'openmetrics_monitor' and logfile contains 'kube-state' phase =* pod!='' value =1 k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') namespace=#namespace#\n| group newestPhase = newest(phase) by pod\n| group amount=count(newestPhase) by newestPhase\n|sort -amount\n| columns Status=newestPhase,  '# Pods'=amount",
          title: "Pods by Status",
          showBarsColumn: "true",
          graphStyle: "",
          layout: {
            h: 14,
            w: 16,
            x: 0,
            y: 14
          }
        }, {
          graphStyle: "line",
          lineSmoothing: "straightLines",
          query: "monitor = 'openmetrics_monitor' and logfile contains 'kube-state' phase =* pod!='' value =1 k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') namespace=#namespace#\n| group newestPhase = newest(phase) by pod, bucket=timebucket('10min')\n| group amount=count(newestPhase) by newestPhase, bucket\n| columns bucket, newestPhase, amount\n| sort -amount\n| transpose newestPhase\n\n\n\n\n",
          title: " Pods by Status Over the Time",
          yScale: "linear",
          layout: {
            h: 14,
            w: 44,
            x: 16,
            y: 14
          }
        }, {
          graphStyle: "line",
          lineSmoothing: "straightLines",
          query: "| join source=(| left join \ncurrentUsageByPod = (monitor = 'openmetrics_monitor' and container_memory_usage_bytes and container='' and pod!='' and k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') and namespace = #namespace# | group container_memory_usage_bytes=avg(value) by pod, k8s-cluster, k8s-node, bucket=timebucket('10min')),\ncontainerLimit = (monitor = 'openmetrics_monitor' and metric='container_spec_memory_limit_bytes' and value > 0 and pod!='' name!=''| group maximumLimit=max(value) by pod, name | group container_spec_memory_limit_bytes=sum(maximumLimit) by pod),\nnodeLimit = (monitor = 'openmetrics_monitor' and metric='node_memory_memtotal_bytes' and pod!=''| columns node_memory_memtotal_bytes=value, k8s-node)\non currentUsageByPod.pod = containerLimit.pod, currentUsageByPod.k8s-node = nodeLimit.k8s-node\n| columns pod, container_memory_usage_bytes, container_spec_memory_limit_bytes, node_memory_memtotal_bytes, bucket\n| let memoryLimit = (container_spec_memory_limit_bytes =null ?  node_memory_memtotal_bytes : container_spec_memory_limit_bytes)\n| let memoryUsage = (container_memory_usage_bytes/memoryLimit) * 100),\nsorting=(| left join \ncurrentUsageByPod = (monitor = 'openmetrics_monitor' and container_memory_usage_bytes and container='' and pod!='' and k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') and namespace = #namespace# | group container_memory_usage_bytes=avg(value) by pod, k8s-cluster, k8s-node, bucket=timebucket('10min')),\ncontainerLimit = (monitor = 'openmetrics_monitor' and metric='container_spec_memory_limit_bytes' and value > 0 and pod!='' name!=''| group maximumLimit=max(value) by pod, name | group container_spec_memory_limit_bytes=sum(maximumLimit) by pod),\nnodeLimit = (monitor = 'openmetrics_monitor' and metric='node_memory_memtotal_bytes' and pod!=''| columns node_memory_memtotal_bytes=value, k8s-node)\non currentUsageByPod.pod = containerLimit.pod, currentUsageByPod.k8s-node = nodeLimit.k8s-node\n| columns pod, container_memory_usage_bytes, container_spec_memory_limit_bytes, node_memory_memtotal_bytes, bucket\n| let memoryLimit = (container_spec_memory_limit_bytes =null ?  node_memory_memtotal_bytes : container_spec_memory_limit_bytes)\n| let memoryUsage = (container_memory_usage_bytes/memoryLimit) * 100\n| group maxUsage=max(memoryUsage) by pod\n| sort -maxUsage\n| limit 20 ) \non pod\n| columns bucket, pod, 'Memory usage in %' =memoryUsage \n| transpose pod",
          title: "Top Pods: Memory usage",
          yScale: "linear",
          layout: {
            h: 14,
            w: 44,
            x: 16,
            y: 42
          }
        }, {
          query: "| left join \ncurrentUsageByPod = (monitor = 'openmetrics_monitor' and container_memory_usage_bytes and container='' and pod!='' and k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') and namespace = #namespace#| group container_memory_usage_bytes=newest(value) by pod, k8s-cluster, k8s-node),\ncontainerLimit = (monitor = 'openmetrics_monitor' and metric='container_spec_memory_limit_bytes' and value > 0 and pod!='' name!=''| group maximumLimit=max(value) by pod, name | group container_spec_memory_limit_bytes=sum(maximumLimit) by pod),\nnodeLimit = (monitor = 'openmetrics_monitor' and metric='node_memory_memtotal_bytes' and pod!=''| columns node_memory_memtotal_bytes=value, k8s-node)\non currentUsageByPod.pod = containerLimit.pod, currentUsageByPod.k8s-node = nodeLimit.k8s-node\n| columns pod, container_memory_usage_bytes, container_spec_memory_limit_bytes, node_memory_memtotal_bytes\n| let memoryLimit = (container_spec_memory_limit_bytes =null ?  node_memory_memtotal_bytes : container_spec_memory_limit_bytes)\n| let memoryUsage = (container_memory_usage_bytes/memoryLimit) * 100\n|  sort -memoryUsage | limit 10 \n| columns 'Pod name'=pod, 'Memory usage in %' =memoryUsage\n",
          title: "Most Memory Intensive Pods",
          layout: {
            h: 14,
            w: 16,
            x: 0,
            y: 42
          }
        }, {
          graphStyle: "line",
          lineSmoothing: "straightLines",
          query: "| join source=( | left join trasmit=(monitor ='openmetrics_monitor' pod!='' metric='container_network_transmit_bytes_total' k8s-cluster=#cluster#  k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') namespace =#namespace# interface contains ('en', 'eth') | columns trasmitedBytes = value, pod, timestamp, interface ), receive=(monitor ='openmetrics_monitor'  metric='container_network_receive_bytes_total' | columns received = value, pod, timestamp, interface ) on trasmit.pod=receive.pod,  trasmit.timestamp = receive.timestamp, trasmit.interface = receive.interface | group maxRecieveBytes=max(received), minReceiveBytes=min(received), maxTransmitBytes=max(trasmitedBytes), minTransmitBytes=min(trasmitedBytes), maxTime = max(timestamp), minTime=min(timestamp)  by pod,  bucket=timebucket('10min'), interface | let receiveBytes = maxRecieveBytes - minReceiveBytes, transmitBytes = maxTransmitBytes - minTransmitBytes, timeBound=(maxTime - minTime)/1000000000 | filter timeBound > 0 | let totalBytes = (receiveBytes + transmitBytes)/1000000/timeBound), sorting = (monitor = 'openmetrics_monitor' and k8s-cluster=#cluster# and pod!='' and namespace=#namespace# and (metric='container_network_transmit_bytes_total' or metric='container_network_transmit_bytes_total') | group transmitOldest=oldest(metric == 'container_network_transmit_bytes_total' ? value : null), transmitNewest=newest(metric == 'container_network_transmit_bytes_total' ? value : null), recieveOldest=oldest(metric == 'container_network_receive_bytes_total' ? value : null), receiveNewest=newest(metric == 'container_network_receive_bytes_total' ? value : null) by pod, tb=timebucket('6min'), interface | let total=(transmitNewest - transmitOldest) + (receiveNewest - recieveOldest) | group maxInBucket=max(total)  by pod, interface | sort -maxInBucket | limit 20 ) on pod, interface | columns bucket, 'Pod name'=(interface + \" \" + pod + \" (MBytes/s)\"), 'Rate in MB'=totalBytes | transpose \"Pod name\"",          
          title: "Network Rate by Pod (MB/s) top 20",
          yScale: "linear",
          layout: {
            h: 14,
            w: 30,
            x: 0,
            y: 56
          }
        }, {
          graphStyle: "line",
          lineSmoothing: "straightLines",
          query: "| join \ntrasmit=(monitor ='openmetrics_monitor' k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') namespace = #namespace# pod!='' metric='container_network_transmit_errors_total'| columns transmitErrors = value, pod, bucket=timebucket('10min')),\nreceive=(monitor ='openmetrics_monitor' pod!='' metric='container_network_receive_errors_total' | columns receiveErrors = value, pod )\non trasmit.pod=receive.pod\n| group maxRecieveErrors=max(receiveErrors), minReceiveErrors=min(receiveErrors), maxTransmitErrors=max(transmitErrors), minTransmitErrors=min(transmitErrors)  by pod, bucket\n| let receiveErrors = maxRecieveErrors - minReceiveErrors, transmitErrors = maxTransmitErrors - minTransmitErrors, totalErrors = receiveErrors + transmitErrors\n| columns bucket, GraphTitle=pod + \"(Total Errors per 10min)\", totalErrors\n| transpose GraphTitle",
          title: "Network Errors by Pod",
          yScale: "linear",
          layout: {
            h: 14,
            w: 30,
            x: 30,
            y: 56
          }
        }, {
          query: "monitor = 'openmetrics_monitor' and logfile contains 'kube-state' phase =* pod!='' value =1 k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') namespace = #namespace#\n| group newestPhase = newest(phase) by pod, namespace  \n| filter newestPhase = 'Active'  || newestPhase = 'Available'  || newestPhase = 'Bound'  || newestPhase = 'Succeeded'  \n| group total=count(newestPhase) by namespace\n| sort -total\n| columns  Namespace=namespace, \"# in Ready State\"=total",
          title: "Pods in Ready State by Namespace",
          showBarsColumn: "true",
          graphStyle: "",
          layout: {
            h: 14,
            w: 20,
            x: 0,
            y: 70
          },
        }, {
          query: "monitor = 'openmetrics_monitor' and logfile contains 'kube-state' phase =* pod!='' value =1 k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') namespace = #namespace#\n| group newestPhase = newest(phase) by pod, namespace  \n| filter newestPhase = 'Running'  \n| group  total=count(newestPhase) by namespace\n| sort  -total\n| columns Namespace=namespace, '# Running'=total",
          title: "Pods Running by Namespace",
          showBarsColumn: "true",
          layout: {
            h: 14,
            w: 20,
            x: 20,
            y: 70
          },
          graphStyle: ""
        }, {
          query: "monitor = 'openmetrics_monitor' and logfile contains 'kube-state' phase =* pod!='' value =1 k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') namespace = #namespace# \n| group newestPhase = newest(phase) by pod, namespace  \n| filter newestPhase = 'Failed' ||   newestPhase = 'Lost' ||   newestPhase = 'Pending' ||   newestPhase = 'Terminating' ||   newestPhase = 'Unknown' \n| group '# Running'=count(newestPhase) by Namespace=namespace",
          title: "Pods in Bad State (not Ready) by Namespace",
          showBarsColumn: "true",
          layout: {
            h: 14,
            w: 20,
            x: 40,
            y: 70
          }
        }, {
          graphStyle: "line",
          lineSmoothing: "straightLines",
          query: "monitor = 'openmetrics_monitor' and logfile contains 'kube-state' phase =* pod!='' value =1 k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') namespace = #namespace# \n| group newestPhase = newest(phase) by pod, namespace, bucket= timebucket('10min')\n| filter newestPhase = 'Running'  \n| group  total=count(newestPhase) by namespace, bucket\n| sort  -total\n| columns  bucket, Namespace=namespace, '# Running'=total\n| transpose  Namespace ",
          title: "Running Pods per Namespace",
          yScale: "linear",
          layout: {
            h: 14,
            w: 30,
            x: 0,
            y: 84
          }
        }, {
          graphStyle: "line",
          lineSmoothing: "straightLines",
          query: "| join\npodPhases = (monitor = 'openmetrics_monitor' and logfile contains 'kube-state' phase ='Running' pod=* value =1 k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') namespace = #namespace#| columns phase, pod, bucket=timebucket('10min')), \nnodeNames = (monitor = 'openmetrics_monitor' pod != '' k8s-node=* | columns pod, k8s-node)\non podPhases.pod = nodeNames.pod\n| group totalCount=estimate_distinct(pod) by k8s-node, bucket\n| columns bucket, \"Node name\"=k8s-node, totalCount\n| transpose \"Node name\"",
          title: "Running Pods per Node",
          yScale: "linear",
          layout: {
            h: 14,
            w: 30,
            x: 30,
            y: 84
          }
        }, {
          graphStyle: "number",
          query: "monitor ='openmetrics_monitor' metric='kube_deployment_status_replicas' k8s-cluster=#cluster#  k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') namespace = #namespace# | group numberOfReplicasPerDeployment=avg(value) by deployment | group sum(numberOfReplicasPerDeployment)",
          title: "Pods Desired in Deployments",
          layout: {
            h: 14,
            w: 12,
            x: 0,
            y: 98
          }
        }, {
          graphStyle: "line",
          lineSmoothing: "straightLines",
          query: "monitor ='openmetrics_monitor' metric='kube_deployment_status_replicas' k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') namespace = #namespace#  \n| group numberOfReplicasPerDeployment=avg(value) by deployment, bucket=timebucket('6min') | columns bucket, deployment, numberOfReplicasPerDeployment \n| transpose deployment",
          title: "Pod Desired by Deployment",
          yScale: "linear",
          layout: {
            h: 14,
            w: 48,
            x: 12,
            y: 98
          }
        }, {
          graphStyle: "number",
          query: "monitor ='openmetrics_monitor' metric='kube_deployment_status_replicas_available' k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') namespace = #namespace# \n| group numberOfReplicasPerDeployment=avg(value) by deployment \n| group sum(numberOfReplicasPerDeployment)",
          title: "Pods Available in Deloyments",
          layout: {
            h: 14,
            w: 12,
            x: 0,
            y: 112
          }
        }, {
          graphStyle: "line",
          lineSmoothing: "straightLines",
          query: "monitor ='openmetrics_monitor' metric='kube_deployment_status_replicas_available' k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') namespace = #namespace# \n| group numberOfReplicasPerDeployment=avg(value) by deployment, bucket=timebucket('6min') | columns bucket, deployment, numberOfReplicasPerDeployment\n| transpose deployment",
          title: "Pods Available by Deployment",
          yScale: "linear",
          layout: {
            h: 14,
            w: 48,
            x: 12,
            y: 112
          }
        }, {
          graphStyle: "number",
          query: "monitor ='openmetrics_monitor' metric='kube_deployment_status_replicas_unavailable' k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') namespace = #namespace# \n| group numberOfReplicasPerDeployment=avg(value) by deployment \n| group sum(numberOfReplicasPerDeployment)",
          title: "Pod Unavailable in Deployments",
          layout: {
  h: 14,
  w: 12,
  x: 0,
  y: 127
}
        }, {
          graphStyle: "line",
          lineSmoothing: "straightLines",
          query: "monitor ='openmetrics_monitor' metric='kube_deployment_status_replicas_unavailable' k8s-cluster=#cluster# k8s-cluster in ('rpi-k3s-cluster', 'sy-stage-stagingeu-eks', 'kubecon-eu-demo', 'dataset-demoo') namespace = #namespace# \n| group numberOfReplicasPerDeployment=avg(value) by deployment, bucket=timebucket('6min') | columns bucket, deployment, numberOfReplicasPerDeployment \n| transpose deployment",
          title: "Pods Unavailable by Deployment",
          yScale: "linear",
          layout: {
            h: 14,
            w: 48,
            x: 12,
            y: 126
          }
        },
      ],
      parameters: [
        {
          "name": "cluster",
          label: "cluster",
          facet: "k8s-cluster",
          defaultValue: "*"
        }, {
          "name": "namespace",
          label: "Namespace",
          facet: "namespace",
          defaultValue: "*"
        },
      ],
    }],
  description: "",
}
